<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <AssemblyName>TheSSS.DICOMViewer.Integration</AssemblyName>
    <RootNamespace>TheSSS.DICOMViewer.Integration</RootNamespace>
    <!-- Set specific target platform if Windows.Devices.Printers requires it, e.g., net8.0-windows10.0.19041.0 -->
    <!-- Or use Platforms tag if building for multiple -->
    <Platforms>AnyCPU;x64</Platforms> 
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.Configuration.Abstractions" Version="8.0.0" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection.Abstractions" Version="8.0.1" />
    <PackageReference Include="Microsoft.Extensions.Options" Version="8.0.2" />
    <PackageReference Include="Microsoft.Extensions.Options.ConfigurationExtensions" Version="8.0.0" />
    <PackageReference Include="Polly" Version="8.4.1" />
    <PackageReference Include="RestSharp" Version="110.2.0" />
    <PackageReference Include="System.Net.Http.Json" Version="8.0.0" />
    <PackageReference Include="System.Threading.RateLimiting" Version="8.0.0" />
    
    <!-- For Windows.Devices.Printers, target a Windows-specific TFM in <TargetFramework> or use SDK reference like below -->
    <!-- Example: <TargetFramework>net8.0-windows10.0.19041.0</TargetFramework> -->
    <!-- Or, if keeping net8.0 and using a separate Windows compatibility pack/SDK: -->
    <FrameworkReference Include="Microsoft.Windows.SDK.NET" Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows' Or '$(TargetFrameworkIdentifier)' == '.NETCoreApp' And $([MSBuild]::IsOSPlatform('Windows'))" />
    <!-- The condition above tries to include it if the TFM is explicitly windows or if it's a general .NETCoreApp TFM but being built on Windows. -->
    <!-- Simpler approach is to target a windows-specific TFM directly if Windows API is a hard requirement. -->

  </ItemGroup>

  <ItemGroup>
    <!-- 
      Project references need to be relative to this .csproj file's location.
      Assuming ServiceIntegrationGateway.csproj is at:
      `REPO-SVC-GATEWAY-001/src/ServiceGateway/ServiceIntegrationGateway.csproj`
      And other projects are at:
      `REPO-INFRA/src/DICOMViewer.Infrastructure/DICOMViewer.Infrastructure.csproj`
      `REPO-CROSS-CUTTING/src/DICOMViewer.CrossCutting/DICOMViewer.CrossCutting.csproj`
      
      The relative path from `REPO-SVC-GATEWAY-001/src/ServiceGateway/` to `REPO-INFRA/src/` would be
      `../../../../REPO-INFRA/src/DICOMViewer.Infrastructure/DICOMViewer.Infrastructure.csproj`
      The given `..\..\..\..\src\` implies the top `src` folder of a monorepo.
      Let's assume a monorepo structure where all repositories are peers under a common root:
      /Root
        /REPO-SVC-GATEWAY-001
          /src
            /ServiceGateway
              ServiceIntegrationGateway.csproj
        /REPO-INFRA
          /src
            /DICOMViewer.Infrastructure
              DICOMViewer.Infrastructure.csproj
        /REPO-CROSS-CUTTING
          /src
            /DICOMViewer.CrossCutting
              DICOMViewer.CrossCutting.csproj
      
      Path from `REPO-SVC-GATEWAY-001/src/ServiceGateway/` to `REPO-INFRA/src/DICOMViewer.Infrastructure/`
      is `../../../REPO-INFRA/src/DICOMViewer.Infrastructure/DICOMViewer.Infrastructure.csproj`
    -->
    <ProjectReference Include="..\..\..\REPO-INFRA\src\DICOMViewer.Infrastructure\DICOMViewer.Infrastructure.csproj" />
    <ProjectReference Include="..\..\..\REPO-CROSS-CUTTING\src\DICOMViewer.CrossCutting\DICOMViewer.CrossCutting.csproj" />
  </ItemGroup>

</Project>